学习链接：https://www.bilibili.com/video/av38657363/?p=1
Spring Boot J2EE一站式解决方案
Spring Cloud 分布式整体解决方案
优点：
starters自动依赖与版本控制
环境：
JDK1.8
Maven3.3.9 mvn -v可以在cmd下查看Maven版本
IDEA2017
SpringBoot 1.5.9.Release
1、创建Maven工程
2、导入Spring Boot依赖
3、编写主程序
psvm 快速写main方法
//来标注一个主程序类，说明这是一个Spring Boot
@SpringBootApplication
public class HelloWorld
{
    public static void main(String[] args)
    {
        //Spring应用启动起来
        SpringApplication.run(HelloWorld.class, args);
    }

}
4、编写相关的Controller和Services
@Controller
public class HelloController
{
    @ResponseBody
    @RequestMapping("/hello")
    public String hello()
    {
        return "Hello World";
    }
}
5、运行主程序测试
6、简化部署
<!--这个插件可以将应用打包成一个可执行的jar包；-->
<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
    </plugins>
</build>
cmd下执行java -jar spring-boot-01-1.0-SNAPSHOT.jar
探究
1、POM文件
a. 父项目
<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.1.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
 </parent>
 它的父项目是
 <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-dependencies</artifactId>
    <version>2.1.2.RELEASE</version>
    <relativePath>../../spring-boot-dependencies</relativePath>
</parent>
它来真正管理Spring Boot应用里面所有的依赖版本
Spring Boot的版本仲裁中心
以后导入依赖默认不需要写版本，没有在dependencies里面管理的依然需要声明版本号
b. 导入的依赖
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
</dependency>
spring-boot-starter-web
spring-boot-starter : spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件
Spring Boot将所有的功能场景都抽取出来，做成一个一个的starters（启动器），只需要在项目里引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景启动器。
2、主程序类
//来标注一个主程序类，说明这是一个Spring Boot
@SpringBootApplication
public class HelloWorldApplication
{
    public static void main(String[] args)
    {
        //Spring应用启动起来
        SpringApplication.run(HelloWorldApplication.class, args);
    }

}
@SpringBootApplication标：Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用。
@Target({ElementType.TYPE})
@Retention(RetentionPolicy.RUNTIME)
@Documented
@Inherited
@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan(
    excludeFilters = {@Filter(
    type = FilterType.CUSTOM,
    classes = {TypeExcludeFilter.class}
), @Filter(
    type = FilterType.CUSTOM,
    classes = {AutoConfigurationExcludeFilter.class}
)}
)
@SpringBootConfiguration: Spring Boot的配置类，标注在某个类上，表示这是一个Spring Boot的配置类。
@Configuration:配置类也是容器中的一个组件@component
@EnableAutoConfiguration:开启自动配置功能，Spring Boot帮我们自动配置。
@AutoConfigurationPackage:自动配置包
@Import({AutoConfigurationPackages.Registrar.class}):给容器中导入一个组件,将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器；
@Import({AutoConfigurationImportSelector.class}):
AutoConfigurationImportSelector.clas:导入那些组件的选择器
将所有需要导入的组件以全类名的方式返回;这些组件就会被添加到容器中
会给容器中导入非常多的自动配置类（xxxAutoConfiguration）
使用Spring Initializer快速创建Spring Boot项目
//这个类的所有方法返回的数据直接写给浏览器，如果是对象转换为json数据
/**
 * @ResponseBody
 * @Controller
 */
@RestController
public class HelloController
{
    //Restful方式
    @RequestMapping("/hello")
    public String hello()
    {
        return "hello quick spring boot";
    }
}
resources文件夹中的static保存所有的静态资源，templates保存所有的模板（Spring Boot jar包默认采用嵌入式的Tomcat，默认不支持JSP页面，可以使用模板引擎，freemaker、thymeleaf）；
application.properties存放应用的配置文件，可以修改一些默认设置(server.port = 8081)。

Spring Boot配置
Spring Boot使用一个全局的配置文件，配置文件的名字是固定的。
application.properties
application.yml
配置文件的作用：修改Spring Boot的默认配置值。
YAML：以数据为中心，比XML和JSON优秀。
YMAL配置实例
server:
  port: 8080
YAML基本语法
k(空格)v：表示一对键值对，必须有空格
以空格的缩进来表示层级关系
属性和值大小写敏感
值的写法：
字面量（数字、字符、布尔）：默认不用加上双引号或者单引号，双引号不会转义字符串里的特殊字符，单引号会转义特殊字符
对象（属性和值，键值对）
friends:
    lastname: zhangsan
    age: 21
行内写法：friends: {lastname: zhangsan, age: 21}

数组
用-表示数组中的一个元素
pets:
    - cat
    - dog
行内写法pets: [cat,dog]
获取配置文件值注入
1、配置文件
server:
  port: 8081

person:
  lastName: zhangsan
  age: 18
  boss: false
  brith: 2017/12/12
  maps: {k1: v1,k2: 12}
  lists:
    - list
    - zhaoliu
  dog:
    name: 小狗
    age: 2
2、Java Bean
//将配置文件中的每一个配置的属性值，映射到这个组件中
//告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定
//prefix = "person"配置文件中哪个下面的所有属性进行一一映射
//只有这个组件是容器中的组件，容器才能提供ConfigurationProperties功能
@Component
@ConfigurationProperties(prefix = "person")
public class Person
{
    private Integer age;
    private Boolean boss;
    private Date brith;
    private Map<String, Object> maps;
    private List<Object> list;
    private Dog dog;
 }
 //支持校验必须是邮箱格式
@Email
private String lastName;
 或者
@Value("${person.last-name}") //SPEL Spring表达式
private String lastName;
@Value("#{11*2}")
private Integer age;
@Value("true")
3、可以导入配置文件处理器，以后编写配置就有提示
<!-- 导入配置文件处理器，配置文件绑定就会有提示-->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-configuration-processor</artifactId>
</dependency>
4、测试
/**
 * SpringBoot单元测试
 * 可以在测试期间很方便的类似编码进行自动注入的容器的功能
 */
@RunWith(SpringRunner.class)
@SpringBootTest
public class DemoApplicationTests {
	@Autowired
	Person person;
	@Test
	public void contextLoads() {
		System.out.println(person);
	}

}
如果只是某个业务逻辑中获取一下配置文件中的某项值，建议用@Value，如果专门编写了JavaBean来和配置文件进行映射，建议使用@ConfigurationProperties（从全局配置文件中获取值）.
@PropertySource 可以加载指定的配置文件
@PropertySource(value = {"classpath:person.yml"})
@Component
//@ConfigurationProperties(prefix = "person")
public class Person
@ImportResource 导入Spring配置文件，让配置文件里面的内容生效；
<beans xmlns="http://www.springframework.org/schema/beans">
    <bean id="helloService"
          class="com.example.demo.service.HelloService"></bean>
</beans>

@ImportResource(locations = {"classpath:beans.xml"})
@SpringBootApplication
public class DemoApplication {

	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}
}
SpringBoot推荐给容器中添加组件的方式：全注解方式
1、配置类
/**
 * 指明当前类是一个配置类，替代之前的配置文件
 * 在配置文件中用<bean></bean>标签添加组件
 */
@Configuration
public class MyAppConfig
{
    /**
     * 将方法的返回值添加到容器中，容器中这个组件默认的ID就是方法名
     * @return
     */
    @Bean
    public HelloService helloService(){
        System.out.print("配置类");
        return new HelloService();
    }

}
配置文件占位符：随机数、默认值
lastName: =张三${random.uuid}
age: ${random.int}
5、Profile
多Profile文件，文件名可以是application-{profile}.propertise/yml，如果创建多个，默认使用的是application.propertise/yml.
可以在application.propertise中激活其它环境
spring:
  profiles:
    active:
      - dev
---
server:
  port: 8083
spring:
  profiles: dev
---
server:
  port: 8084
spring:
  profiles: product
或者命令行激活 --spring-profile-active=dev
或者虚拟机参数VM option -Dspring-profiles.active=dev
6、配置文件加载位置
SpringBoot启动会扫描以下位置的application.properties或者application.yml文件作为SpringBoot的默认配置文件
-file:./config
-file:./
-classpath:./config
-classpath:./
优先级由高到低，高优先的配置会覆盖低优先级的配置
SpringBoot会从这四个位置全部加载配置文件，形成互补配置。
项目打包好以后，可以使用命令行参数的形式，启动项目的时候，指定配置文件的新位置，指定的配置文件和默认加载的配置文件会共同起作用，形成互补配置。
spring.config.location=?
优先加载带profile的配置文件，由jar包内向外寻找
7、自动配置原理
8、开启SpringBoot的Debug模式
可以通过debug=true属性让控制台打印自动配置属性
日志框架
日志门面：JCL、SLF4J、jboss-logging  抽象层
日志实现：Log4j、JUL、Log4j2、Logback
SLF4J + LogBack
SpringBoot底层是Spring框架，Spring框架默认用JCL，SpringBoot选用SLF4J + LogBack。
给系统中导入SLF4J+LogBack jar包
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HelloWorld {
  public static void main(String[] args) {
    Logger logger = LoggerFactory.getLogger(HelloWorld.class);
    logger.info("Hello World");
  }
}
slf4j-api.jar;logback-classic.jar,logback-core.jar
每一个日志实现框架都有自己的配置文件，使用slf4j以后，配置文件做成日志实现框架的配置文件。
统一日志记录到slf4j
1、将系统中其它日志框架排除
2、用中间包替换原有的日志框架
3、导入slf4j其它的实现





























